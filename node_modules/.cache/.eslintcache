[{"/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/index.js":"1","/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/App.js":"2","/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/reportWebVitals.js":"3","/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/component/snackgame/index.js":"4"},{"size":500,"mtime":1622196299005,"results":"5","hashOfConfig":"6"},{"size":210,"mtime":1622196299005,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1622196299005,"results":"8","hashOfConfig":"6"},{"size":6789,"mtime":1622196299005,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1hweqlg",{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"17","messages":"18","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/index.js",[],"/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/App.js",["20"],"import logo from './logo.svg';\nimport './App.css';\nimport SnackGame from \"./component/snackgame\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SnackGame />\n    </div>\n  );\n}\n\nexport default App;\n","/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/reportWebVitals.js",[],"/home/gopal.salunkhe/Desktop/snackGame/snake_game/src/component/snackgame/index.js",["21","22","23","24","25","26","27"],"import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nconst SnackGame = () => {\n  let blockMaping = require(\"../../json/maping.json\"); // json file for dynamic div,classes,ladder,snake.\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n  const [playerTwoTotalWin, setPlayerTwoTotalWin] = useState(0);\n  const [turnament, setTurnament] = useState(null);\n  const [steps, setSteps] = useState({\n    playerOne: 0,\n    playerTwo: 0\n  });\n\n  useEffect(() => {\n    //compair player win count with turnament count\n    if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player one win the turnament\");\n      setTurnament(null);\n      newGame();\n    } else if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player two win the turnament\");\n      setTurnament(null);\n      newGame();\n    }\n  }, [playerOneTotalWin, playerTwoTotalWin]);\n\n  const playerAction = (\n    setDice,\n    setActivePlayer,\n    playerActiveIndex,\n    setPlayerActiveIndex,\n    setPlayerTotalWin,\n    playerTotalWin,\n    playerNumber,\n    nextTurn\n  ) => {\n    //check for active player\n    if (activePlayer == playerNumber) {\n      setSteps({ ...steps, [playerNumber]: (steps[playerNumber] += 1) });\n      console.log(steps);\n      //random number from 1 to 6\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      //state update\n      setDice(randomNumber);\n      // state for identify whose tern\n      setActivePlayer(nextTurn);\n      // check for skip count more than 100\n      if (playerActiveIndex + randomNumber <= 100) {\n        // set the position\n        setPlayerActiveIndex(playerActiveIndex + randomNumber);\n        // to get ladder number\n        let ladder = parseInt(\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        // to get snake number\n        let snake = parseInt(\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n\n        // check for ladder/ number is there\n        if (ladder || snake) {\n          // update the state after 500 milisecond for better experience\n          setTimeout(function() {\n            setPlayerActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        // check for player win\n        if (playerActiveIndex + randomNumber == 100) {\n          setTimeout(function() {\n            alert(`${playerNumber} Win by ${steps[playerNumber]} steps`); //alert\n            setPlayerTotalWin(playerTotalWin + 1); //set win cont\n            restartGame(); // restart game\n          }, 800);\n        }\n      }\n    }\n  };\n\n  const diceClick = player => {\n    if (player == \"playerOne\") {\n      playerAction(\n        setPlayerOneDice,\n        setActivePlayer,\n        playerOneActiveIndex,\n        setPlayerOneActiveIndex,\n        setPlayerOneTotalWin,\n        playerOneTotalWin,\n        player,\n        \"playerTwo\"\n      );\n    } else if (player == \"playerTwo\") {\n      playerAction(\n        setPlayerTwoDice,\n        setActivePlayer,\n        playerTwoActiveIndex,\n        setPlayerTwoActiveIndex,\n        setPlayerTwoTotalWin,\n        playerTwoTotalWin,\n        player,\n        \"playerOne\"\n      );\n    }\n  };\n\n  const restartGame = () => {\n    // for restart game\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n    setSteps({\n      playerOne: 0,\n      playerTwo: 0\n    });\n  };\n\n  const newGame = () => {\n    //for new game\n    setPlayerOneTotalWin(0);\n    setPlayerTwoTotalWin(0);\n    restartGame();\n  };\n\n  const onTurnamentClick = () => {\n    //for set turnament limit\n    var turnamentLimit = prompt(\"Set the match limit\", 5);\n    if (turnamentLimit) {\n      setTurnament(turnamentLimit);\n    }\n  };\n\n  const getPlayBoard = () => {\n    return (\n      <>\n        {blockMaping.map((row, index) => {\n          return (\n            <>\n              <div className={`row${index + 1}`}>\n                {row.map((value, rowIndex) => {\n                  return (\n                    <div className={`block-${rowIndex + 1}`}>\n                      <div\n                        id={value.block}\n                        data-for-ladder={value.ladder}\n                        data-for-snake={value.snake}\n                      >\n                        {playerOneActiveIndex === value.block && (\n                          <span className=\"playerOneCoin\">@</span>\n                        )}\n                        {playerTwoActiveIndex === value.block && (\n                          <span className=\"playerTwoCoin\">@</span>\n                        )}\n                        {value.block}\n                        {value.ladder ? (\n                          <span className=\"ladder-to\">{`-> ${value.ladder}`}</span>\n                        ) : (\n                          value.snake && (\n                            <span className=\"snake-to\">{`-> ${value.snake}`}</span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </>\n          );\n        })}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <button onClick={restartGame} className=\"restart-game-button\">\n        Restart\n      </button>\n      <button onClick={newGame} className=\"new-game-button\">\n        New Game\n      </button>\n      <button onClick={onTurnamentClick} className=\"turnament-button\">\n        Set turnament\n      </button>\n      <div className=\"playerOne\">\n        Player One\n        <div className=\"dice-1\">\n          <button\n            className=\"playerOneDice\"\n            onClick={() => diceClick(\"playerOne\")}\n          >\n            {playerOneDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player one total Win :- {playerOneTotalWin}\n        </div>\n      </div>\n      <div className=\"playerTwo\">\n        Player Two\n        <div className=\"dice-2\">\n          <button\n            className=\"playerTwoDice\"\n            onClick={() => diceClick(\"playerTwo\")}\n          >\n            {playerTwoDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player two total Win :- {playerTwoTotalWin}\n        </div>\n      </div>\n      {getPlayBoard()}\n    </div>\n  );\n};\nexport default SnackGame;\n",{"ruleId":"28","severity":1,"message":"29","line":1,"column":8,"nodeType":"30","messageId":"31","endLine":1,"endColumn":12},{"ruleId":"32","severity":1,"message":"33","line":20,"column":40,"nodeType":"34","messageId":"35","endLine":20,"endColumn":42},{"ruleId":"32","severity":1,"message":"33","line":24,"column":47,"nodeType":"34","messageId":"35","endLine":24,"endColumn":49},{"ruleId":"36","severity":1,"message":"37","line":29,"column":6,"nodeType":"38","endLine":29,"endColumn":44,"suggestions":"39"},{"ruleId":"32","severity":1,"message":"33","line":42,"column":22,"nodeType":"34","messageId":"35","endLine":42,"endColumn":24},{"ruleId":"32","severity":1,"message":"33","line":77,"column":46,"nodeType":"34","messageId":"35","endLine":77,"endColumn":48},{"ruleId":"32","severity":1,"message":"33","line":89,"column":16,"nodeType":"34","messageId":"35","endLine":89,"endColumn":18},{"ruleId":"32","severity":1,"message":"33","line":100,"column":23,"nodeType":"34","messageId":"35","endLine":100,"endColumn":25},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'newGame' and 'turnament'. Either include them or remove the dependency array.","ArrayExpression",["40"],{"desc":"41","fix":"42"},"Update the dependencies array to be: [newGame, playerOneTotalWin, playerTwoTotalWin, turnament]",{"range":"43","text":"44"},[1168,1206],"[newGame, playerOneTotalWin, playerTwoTotalWin, turnament]"]