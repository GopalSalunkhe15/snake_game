{"ast":null,"code":"var _jsxFileName = \"/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SnackGame = () => {\n  _s();\n\n  let blockMaping = require(\"../../json/maping.json\");\n\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n  const [playerTwoTotalWin, setPlayerTwoTotalWin] = useState(0);\n\n  const playerOneAction = (setDice, setActivePlayer, playerActiveIndex, setPlayerActiveIndex, setPlayerTotalWin, playerTotalWin, playerNumber, nextTurn) => {\n    debugger;\n\n    if (activePlayer == playerNumber) {\n      let randomNumber = Math.floor(Math.random() * 6) + 1; //random number from 1 to 6\n\n      setDice(randomNumber); //state update\n\n      setActivePlayer(nextTurn); // state for identify whose tern\n\n      if (playerActiveIndex + randomNumber <= 100) {\n        // check for skip count more than 100\n        setPlayerActiveIndex(playerActiveIndex + randomNumber); // set the position\n\n        let ladder = parseInt( // to get ladder number\n        document.getElementById(playerActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt( // to get snake number\n        document.getElementById(playerActiveIndex + randomNumber).getAttribute(\"data-for-snake\"));\n\n        if (ladder || snake) {\n          // check for ladder/ number is there\n          setTimeout(function () {\n            // update the state after 500 milisecond for better experience\n            setPlayerActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerActiveIndex + randomNumber == 100) {\n          // check for player win\n          alert(`${player} Win`); //alert\n\n          setPlayerTotalWin(playerTotalWin + 1); //set win cont\n\n          restartGame(); // restart game\n        }\n      }\n    }\n  };\n\n  const playerTwoAction = () => {\n    if (activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        setPlayerTwoActiveIndex(playerTwoActiveIndex + randomNumber);\n        let ladder = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-snake\"));\n\n        if (ladder || snake) {\n          setTimeout(function () {\n            setPlayerTwoActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n          setPlayerTwoTotalWin(playerTwoTotalWin + 1);\n          restartGame();\n        }\n      }\n    }\n  };\n\n  const diceClick = player => {\n    if (player == \"playerOne\") {\n      playerOneAction(setPlayerOneDice, setActivePlayer, playerOneActiveIndex, setPlayerOneActiveIndex, setPlayerOneTotalWin, playerOneTotalWin, player, \"playerTwo\");\n    } else if (player == \"playerTwo\") {\n      playerTwoAction();\n    }\n  };\n\n  const restartGame = () => {\n    // for restart game\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      className: \"restart-button\",\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerOne\",\n      children: [\"Player One\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerOneDice\",\n          onClick: () => diceClick(\"playerOne\"),\n          children: playerOneDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerWinCount\",\n        children: [\"Player one total Win :- \", playerOneTotalWin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTwo\",\n      children: [\"Player Two\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerTwoDice\",\n          onClick: () => diceClick(\"playerTwo\"),\n          children: playerTwoDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerWinCount\",\n        children: [\"Player two total Win :- \", playerTwoTotalWin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), blockMaping.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `row${index + 1}`,\n          children: row.map((value, rowIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `block-${rowIndex + 1}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: value.block,\n                \"data-for-ladder\": value.ladder,\n                \"data-for-snake\": value.snake,\n                children: [playerOneActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"playerOneCoin\",\n                  children: \"@\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 164,\n                  columnNumber: 25\n                }, this), playerTwoActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"playerTwoCoin\",\n                  children: \"@\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 167,\n                  columnNumber: 25\n                }, this), value.block, value.ladder ? /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ladder-to\",\n                  children: `-> ${value.ladder}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 171,\n                  columnNumber: 25\n                }, this) : value.snake && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"snake-to\",\n                  children: `-> ${value.snake}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 174,\n                  columnNumber: 27\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 158,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 157,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SnackGame, \"PNqKgtqZ8HXhBwkC48Othtea+PI=\");\n\n_c = SnackGame;\nexport default SnackGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnackGame\");","map":{"version":3,"sources":["/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js"],"names":["React","useState","useEffect","SnackGame","blockMaping","require","playerOneActiveIndex","setPlayerOneActiveIndex","playerTwoActiveIndex","setPlayerTwoActiveIndex","playerOneDice","setPlayerOneDice","playerTwoDice","setPlayerTwoDice","activePlayer","setActivePlayer","playerOneTotalWin","setPlayerOneTotalWin","playerTwoTotalWin","setPlayerTwoTotalWin","playerOneAction","setDice","playerActiveIndex","setPlayerActiveIndex","setPlayerTotalWin","playerTotalWin","playerNumber","nextTurn","randomNumber","Math","floor","random","ladder","parseInt","document","getElementById","getAttribute","snake","setTimeout","alert","player","restartGame","playerTwoAction","diceClick","map","row","index","value","rowIndex","block"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nconst SnackGame = () => {\n  let blockMaping = require(\"../../json/maping.json\");\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n  const [playerTwoTotalWin, setPlayerTwoTotalWin] = useState(0);\n\n  const playerOneAction = (setDice,\n    setActivePlayer,\n    playerActiveIndex,\n    setPlayerActiveIndex,\n    setPlayerTotalWin,\n    playerTotalWin,\n    playerNumber,\n    nextTurn\n    ) => {\n    debugger;\n    if (activePlayer == playerNumber) {\n      let randomNumber = Math.floor(Math.random() * 6) + 1; //random number from 1 to 6\n      setDice(randomNumber); //state update\n      setActivePlayer(nextTurn); // state for identify whose tern\n      if (playerActiveIndex + randomNumber <= 100) {\n        // check for skip count more than 100\n        setPlayerActiveIndex(playerActiveIndex + randomNumber); // set the position\n        let ladder = parseInt(\n          // to get ladder number\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          // to get snake number\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n        if (ladder || snake) {\n          // check for ladder/ number is there\n          setTimeout(function() {\n            // update the state after 500 milisecond for better experience\n            setPlayerActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerActiveIndex + randomNumber == 100) {\n          // check for player win\n          alert(`${player} Win`); //alert\n          setPlayerTotalWin(playerTotalWin + 1); //set win cont\n          restartGame(); // restart game\n        }\n      }\n    }\n  };\n\n  const playerTwoAction = () => {\n    if (activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        setPlayerTwoActiveIndex(playerTwoActiveIndex + randomNumber);\n        let ladder = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n        if (ladder || snake) {\n          setTimeout(function() {\n            setPlayerTwoActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n          setPlayerTwoTotalWin(playerTwoTotalWin + 1);\n          restartGame();\n        }\n      }\n    }\n  };\n\n  const diceClick = player => {\n    if (player == \"playerOne\") {\n      playerOneAction(\n        setPlayerOneDice,\n        setActivePlayer,\n        playerOneActiveIndex,\n        setPlayerOneActiveIndex,\n        setPlayerOneTotalWin,\n        playerOneTotalWin,\n        player,\n        \"playerTwo\"\n      );\n    } else if (player == \"playerTwo\") {\n      playerTwoAction();\n    }\n  };\n\n  const restartGame = () => {\n    // for restart game\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <button onClick={restartGame} className=\"restart-button\">\n        Restart\n      </button>\n      <div className=\"playerOne\">\n        Player One\n        <div className=\"dice-1\">\n          <button\n            className=\"playerOneDice\"\n            onClick={() => diceClick(\"playerOne\")}\n          >\n            {playerOneDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player one total Win :- {playerOneTotalWin}\n        </div>\n      </div>\n      <div className=\"playerTwo\">\n        Player Two\n        <div className=\"dice-2\">\n          <button\n            className=\"playerTwoDice\"\n            onClick={() => diceClick(\"playerTwo\")}\n          >\n            {playerTwoDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player two total Win :- {playerTwoTotalWin}\n        </div>\n      </div>\n      {blockMaping.map((row, index) => {\n        return (\n          <>\n            <div className={`row${index + 1}`}>\n              {row.map((value, rowIndex) => {\n                return (\n                  <div className={`block-${rowIndex + 1}`}>\n                    <div\n                      id={value.block}\n                      data-for-ladder={value.ladder}\n                      data-for-snake={value.snake}\n                    >\n                      {playerOneActiveIndex === value.block && (\n                        <span className=\"playerOneCoin\">@</span>\n                      )}\n                      {playerTwoActiveIndex === value.block && (\n                        <span className=\"playerTwoCoin\">@</span>\n                      )}\n                      {value.block}\n                      {value.ladder ? (\n                        <span className=\"ladder-to\">{`-> ${value.ladder}`}</span>\n                      ) : (\n                        value.snake && (\n                          <span className=\"snake-to\">{`-> ${value.snake}`}</span>\n                        )\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        );\n      })}\n    </div>\n  );\n};\nexport default SnackGame;\n"]},"metadata":{},"sourceType":"module"}