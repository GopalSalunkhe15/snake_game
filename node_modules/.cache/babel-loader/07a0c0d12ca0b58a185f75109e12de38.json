{"ast":null,"code":"var _jsxFileName = \"/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SnackGame = () => {\n  _s();\n\n  let blockMaping = require(\"../../json/maping.json\");\n\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n\n  const diceClick = player => {\n    if (player == \"playerOne\" && activePlayer == \"playerOne\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerOneDice(randomNumber);\n      setActivePlayer(\"playerTwo\");\n\n      if (playerOneActiveIndex + randomNumber <= 100) {\n        setPlayerOneActiveIndex(playerOneActiveIndex + randomNumber);\n        let ladder = parseInt(document.getElementById(playerOneActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt(document.getElementById(playerOneActiveIndex + randomNumber).getAttribute(\"data-for-snake\"));\n\n        if (ladder || snake) {\n          setTimeout(function () {\n            setPlayerOneActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerOneActiveIndex + randomNumber == 100) {\n          alert(\"player One win\");\n          setPlayerOneActiveIndex(1);\n          setPlayerTwoActiveIndex(1);\n          setPlayerOneDice(0);\n          setPlayerTwoDice(0);\n          setActivePlayer(\"playerOne\");\n        }\n      }\n    } else if (player == \"playerTwo\" && activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        setPlayerTwoActiveIndex(playerTwoActiveIndex + randomNumber);\n        let ladder = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-snake\"));\n\n        if (ladder || snake) {\n          setTimeout(function () {\n            setPlayerTwoActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n          setPlayerOneActiveIndex(1);\n          setPlayerTwoActiveIndex(1);\n          setPlayerOneDice(0);\n          setPlayerTwoDice(0);\n          setActivePlayer(\"playerOne\");\n        }\n      }\n    }\n  };\n\n  const restartGame = () => {\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      className: \"restart-button\",\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerOne\",\n      children: [\"playerOne\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerOneDice\",\n          onClick: () => diceClick(\"playerOne\"),\n          children: playerOneDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTwo\",\n      children: [\"playerTwo\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerTwoDice\",\n          onClick: () => diceClick(\"playerTwo\"),\n          children: playerTwoDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [\"player one total Win \", playerOneTotalWin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), blockMaping.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `row${index + 1}`,\n          children: row.map((value, rowIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `block-${rowIndex + 1}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: value.block,\n                \"data-for-ladder\": value.ladder,\n                \"data-for-snake\": value.snake,\n                children: [playerOneActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"playerOneCoin\",\n                  children: \"@\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 121,\n                  columnNumber: 25\n                }, this), playerTwoActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"playerTwoCoin\",\n                  children: \"@\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 124,\n                  columnNumber: 25\n                }, this), value.block, value.ladder && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"ladder-to\",\n                  children: `-> ${value.ladder}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 128,\n                  columnNumber: 25\n                }, this), value.snake && /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"snake-to\",\n                  children: `-> ${value.snake}`\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 131,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SnackGame, \"o4taScK6sDUGhy6NvPBBIV9ogww=\");\n\n_c = SnackGame;\nexport default SnackGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnackGame\");","map":{"version":3,"sources":["/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js"],"names":["React","useState","useEffect","SnackGame","blockMaping","require","playerOneActiveIndex","setPlayerOneActiveIndex","playerTwoActiveIndex","setPlayerTwoActiveIndex","playerOneDice","setPlayerOneDice","playerTwoDice","setPlayerTwoDice","activePlayer","setActivePlayer","playerOneTotalWin","setPlayerOneTotalWin","diceClick","player","randomNumber","Math","floor","random","ladder","parseInt","document","getElementById","getAttribute","snake","setTimeout","alert","restartGame","map","row","index","value","rowIndex","block"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nconst SnackGame = () => {\n  let blockMaping = require(\"../../json/maping.json\");\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin , setPlayerOneTotalWin] = useState(0)\n\n  const diceClick = player => {\n    if (player == \"playerOne\" && activePlayer == \"playerOne\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerOneDice(randomNumber);\n      setActivePlayer(\"playerTwo\");\n      if (playerOneActiveIndex + randomNumber <= 100) {\n        setPlayerOneActiveIndex(playerOneActiveIndex + randomNumber);\n        let ladder = parseInt(\n          document\n            .getElementById(playerOneActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          document\n            .getElementById(playerOneActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n        if (ladder || snake) {\n          setTimeout(function() {\n            setPlayerOneActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerOneActiveIndex + randomNumber == 100) {\n          alert(\"player One win\");\n          setPlayerOneActiveIndex(1);\n          setPlayerTwoActiveIndex(1);\n          setPlayerOneDice(0);\n          setPlayerTwoDice(0);\n          setActivePlayer(\"playerOne\");\n        }\n      }\n    } else if (player == \"playerTwo\" && activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        setPlayerTwoActiveIndex(playerTwoActiveIndex + randomNumber);\n        let ladder = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n        if (ladder || snake) {\n          setTimeout(function() {\n            setPlayerTwoActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n          setPlayerOneActiveIndex(1);\n          setPlayerTwoActiveIndex(1);\n          setPlayerOneDice(0);\n          setPlayerTwoDice(0);\n          setActivePlayer(\"playerOne\");\n        }\n      }\n    }\n  };\n  const restartGame = () => {\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n  };\n  return (\n    <div className=\"snake-game-container\">\n      <button onClick={restartGame} className=\"restart-button\">\n        Restart\n      </button>\n      <div className=\"playerOne\">\n        playerOne\n        <div className=\"dice-1\">\n          <button className = \"playerOneDice\" onClick={() => diceClick(\"playerOne\")}>\n            {playerOneDice}\n          </button>\n        </div>\n      </div>\n      <div className=\"playerTwo\">\n        playerTwo\n        <div className=\"dice-2\">\n          <button  className = \"playerTwoDice\" onClick={() => diceClick(\"playerTwo\")}>\n            {playerTwoDice}\n          </button>\n        </div>\n        <div>player one total Win {playerOneTotalWin}</div>\n      </div>\n      {blockMaping.map((row, index) => {\n        return (\n          <>\n            <div className={`row${index + 1}`}>\n              {row.map((value, rowIndex) => {\n                return (\n                  <div className={`block-${rowIndex + 1}`}>\n                    <div\n                      id={value.block}\n                      data-for-ladder={value.ladder}\n                      data-for-snake={value.snake}\n                    >\n                      {/* {value.ladder && <div className = {`ladder-from-to${value.block}`} > </div>}\n                    {value.snake &&  <div className = {`snake-from-to${value.block}`}></div>} */}\n                      {playerOneActiveIndex === value.block && (\n                        <span className=\"playerOneCoin\">@</span>\n                      )}\n                      {playerTwoActiveIndex === value.block && (\n                        <span className=\"playerTwoCoin\">@</span>\n                      )}\n                      {value.block}\n                      {value.ladder && (\n                        <span className=\"ladder-to\">{`-> ${value.ladder}`}</span>\n                      )}\n                      {value.snake && (\n                        <span className=\"snake-to\">{`-> ${value.snake}`}</span>\n                      )}\n                      {/* <div class=\"oneRed\"></div>\n                      <div class=\"oneGreen\"></div> */}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        );\n      })}\n    </div>\n  );\n};\nexport default SnackGame;\n"]},"metadata":{},"sourceType":"module"}