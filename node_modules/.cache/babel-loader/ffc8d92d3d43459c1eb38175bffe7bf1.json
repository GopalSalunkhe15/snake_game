{"ast":null,"code":"var _jsxFileName = \"/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SnackGame = () => {\n  _s();\n\n  let blockMaping = require(\"../../json/maping.json\"); // json file for dynamic div,classes,ladder,snake.\n\n\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n  const [playerTwoTotalWin, setPlayerTwoTotalWin] = useState(0);\n  const [turnament, setTurnament] = useState(null);\n  const [steps, setSteps] = useState({\n    playerOne: 0,\n    playerTwo: 0\n  });\n  useEffect(() => {\n    //compair player win count with turnament count\n    if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player one win the turnament\");\n      setTurnament(null);\n      newGame();\n    } else if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player two win the turnament\");\n      setTurnament(null);\n      newGame();\n    }\n  }, [playerOneTotalWin, playerTwoTotalWin]);\n\n  const playerAction = (setDice, setActivePlayer, playerActiveIndex, setPlayerActiveIndex, setPlayerTotalWin, playerTotalWin, playerNumber, nextTurn) => {\n    //check for active player\n    if (activePlayer == playerNumber) {\n      setSteps({ ...steps,\n        [playerNumber]: steps[playerNumber] += 1\n      });\n      console.log(steps); //random number from 1 to 6\n\n      let randomNumber = +49; //state update\n\n      setDice(randomNumber); // state for identify whose tern\n\n      setActivePlayer(nextTurn); // check for skip count more than 100\n\n      if (playerActiveIndex + randomNumber <= 100) {\n        // set the position\n        setPlayerActiveIndex(playerActiveIndex + randomNumber); // to get ladder number\n\n        let ladder = parseInt(document.getElementById(playerActiveIndex + randomNumber).getAttribute(\"data-for-ladder\")); // to get snake number\n\n        let snake = parseInt(document.getElementById(playerActiveIndex + randomNumber).getAttribute(\"data-for-snake\")); // check for ladder/ number is there\n\n        if (ladder || snake) {\n          // update the state after 500 milisecond for better experience\n          setTimeout(function () {\n            setPlayerActiveIndex(ladder || snake);\n          }, 500);\n        } // check for player win\n\n\n        if (playerActiveIndex + randomNumber == 100) {\n          setTimeout(function () {\n            alert(`${playerNumber} Win by ${steps[playerNumber]} steps`); //alert\n\n            setPlayerTotalWin(playerTotalWin + 1); //set win cont\n\n            restartGame(); // restart game\n          }, 800);\n        }\n      }\n    }\n  };\n\n  const diceClick = player => {\n    if (player == \"playerOne\") {\n      playerAction(setPlayerOneDice, setActivePlayer, playerOneActiveIndex, setPlayerOneActiveIndex, setPlayerOneTotalWin, playerOneTotalWin, player, \"playerTwo\");\n    } else if (player == \"playerTwo\") {\n      playerAction(setPlayerTwoDice, setActivePlayer, playerTwoActiveIndex, setPlayerTwoActiveIndex, setPlayerTwoTotalWin, playerTwoTotalWin, player, \"playerOne\");\n    }\n\n    console.log(steps);\n  };\n\n  const restartGame = () => {\n    // for restart game\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n    setSteps({\n      playerOne: 0,\n      playerTwo: 0\n    });\n  };\n\n  const newGame = () => {\n    //for new game\n    setPlayerOneTotalWin(0);\n    setPlayerTwoTotalWin(0);\n    restartGame();\n  };\n\n  const onTurnamentClick = () => {\n    //for set turnament limit\n    var turnamentLimit = prompt(\"Set the match limit\", 5);\n\n    if (turnamentLimit) {\n      setTurnament(turnamentLimit);\n    }\n  };\n\n  const getPlayBoard = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: blockMaping.map((row, index) => {\n        return /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `row${index + 1}`,\n            children: row.map((value, rowIndex) => {\n              return /*#__PURE__*/_jsxDEV(\"div\", {\n                className: `block-${rowIndex + 1}`,\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  id: value.block,\n                  \"data-for-ladder\": value.ladder,\n                  \"data-for-snake\": value.snake,\n                  children: [playerOneActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"playerOneCoin\",\n                    children: \"@\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 159,\n                    columnNumber: 27\n                  }, this), playerTwoActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"playerTwoCoin\",\n                    children: \"@\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 162,\n                    columnNumber: 27\n                  }, this), value.block, value.ladder ? /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"ladder-to\",\n                    children: `-> ${value.ladder}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 166,\n                    columnNumber: 27\n                  }, this) : value.snake && /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"snake-to\",\n                    children: `-> ${value.snake}`\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 169,\n                    columnNumber: 29\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 153,\n                  columnNumber: 23\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 21\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 15\n          }, this)\n        }, void 0, false);\n      })\n    }, void 0, false);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: restartGame,\n      className: \"restart-game-button\",\n      children: \"Restart\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: newGame,\n      className: \"new-game-button\",\n      children: \"New Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onTurnamentClick,\n      className: \"turnament-button\",\n      children: \"Set turnament\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerOne\",\n      children: [\"Player One\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerOneDice\",\n          onClick: () => diceClick(\"playerOne\"),\n          children: playerOneDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerWinCount\",\n        children: [\"Player one total Win :- \", playerOneTotalWin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTwo\",\n      children: [\"Player Two\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"playerTwoDice\",\n          onClick: () => diceClick(\"playerTwo\"),\n          children: playerTwoDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 212,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"playerWinCount\",\n        children: [\"Player two total Win :- \", playerTwoTotalWin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 7\n    }, this), getPlayBoard()]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SnackGame, \"mvp2Rvk+J01crrkFjQkuAbPhDdU=\");\n\n_c = SnackGame;\nexport default SnackGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnackGame\");","map":{"version":3,"sources":["/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js"],"names":["React","useState","useEffect","SnackGame","blockMaping","require","playerOneActiveIndex","setPlayerOneActiveIndex","playerTwoActiveIndex","setPlayerTwoActiveIndex","playerOneDice","setPlayerOneDice","playerTwoDice","setPlayerTwoDice","activePlayer","setActivePlayer","playerOneTotalWin","setPlayerOneTotalWin","playerTwoTotalWin","setPlayerTwoTotalWin","turnament","setTurnament","steps","setSteps","playerOne","playerTwo","alert","newGame","playerAction","setDice","playerActiveIndex","setPlayerActiveIndex","setPlayerTotalWin","playerTotalWin","playerNumber","nextTurn","console","log","randomNumber","ladder","parseInt","document","getElementById","getAttribute","snake","setTimeout","restartGame","diceClick","player","onTurnamentClick","turnamentLimit","prompt","getPlayBoard","map","row","index","value","rowIndex","block"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nconst SnackGame = () => {\n  let blockMaping = require(\"../../json/maping.json\"); // json file for dynamic div,classes,ladder,snake.\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n  const [playerOneTotalWin, setPlayerOneTotalWin] = useState(0);\n  const [playerTwoTotalWin, setPlayerTwoTotalWin] = useState(0);\n  const [turnament, setTurnament] = useState(null);\n  const [steps, setSteps] = useState({\n    playerOne: 0,\n    playerTwo: 0\n  });\n\n  useEffect(() => {\n    //compair player win count with turnament count\n    if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player one win the turnament\");\n      setTurnament(null);\n      newGame();\n    } else if (turnament && playerOneTotalWin == turnament) {\n      alert(\" Player two win the turnament\");\n      setTurnament(null);\n      newGame();\n    }\n  }, [playerOneTotalWin, playerTwoTotalWin]);\n\n  const playerAction = (\n    setDice,\n    setActivePlayer,\n    playerActiveIndex,\n    setPlayerActiveIndex,\n    setPlayerTotalWin,\n    playerTotalWin,\n    playerNumber,\n    nextTurn\n  ) => {\n    //check for active player\n    if (activePlayer == playerNumber) {\n      setSteps({ ...steps, [playerNumber]: (steps[playerNumber] += 1) });\n      console.log(steps);\n      //random number from 1 to 6\n      let randomNumber =+ 49;\n      //state update\n      setDice(randomNumber);\n      // state for identify whose tern\n      setActivePlayer(nextTurn);\n      // check for skip count more than 100\n      if (playerActiveIndex + randomNumber <= 100) {\n        // set the position\n        setPlayerActiveIndex(playerActiveIndex + randomNumber);\n        // to get ladder number\n        let ladder = parseInt(\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        // to get snake number\n        let snake = parseInt(\n          document\n            .getElementById(playerActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snake\")\n        );\n\n        // check for ladder/ number is there\n        if (ladder || snake) {\n          // update the state after 500 milisecond for better experience\n          setTimeout(function() {\n            setPlayerActiveIndex(ladder || snake);\n          }, 500);\n        }\n\n        // check for player win\n        if (playerActiveIndex + randomNumber == 100) {\n          setTimeout(function() {\n            alert(`${playerNumber} Win by ${steps[playerNumber]} steps`); //alert\n            setPlayerTotalWin(playerTotalWin + 1); //set win cont\n            restartGame(); // restart game\n          }, 800);\n        }\n      }\n    }\n  };\n\n  const diceClick = player => {\n    if (player == \"playerOne\") {\n      playerAction(\n        setPlayerOneDice,\n        setActivePlayer,\n        playerOneActiveIndex,\n        setPlayerOneActiveIndex,\n        setPlayerOneTotalWin,\n        playerOneTotalWin,\n        player,\n        \"playerTwo\"\n      );\n    } else if (player == \"playerTwo\") {\n      playerAction(\n        setPlayerTwoDice,\n        setActivePlayer,\n        playerTwoActiveIndex,\n        setPlayerTwoActiveIndex,\n        setPlayerTwoTotalWin,\n        playerTwoTotalWin,\n        player,\n        \"playerOne\"\n      );\n    }\n    console.log(steps);\n  };\n\n  const restartGame = () => {\n    // for restart game\n    setPlayerOneActiveIndex(1);\n    setPlayerTwoActiveIndex(1);\n    setPlayerOneDice(0);\n    setPlayerTwoDice(0);\n    setActivePlayer(\"playerOne\");\n    setSteps({\n      playerOne: 0,\n      playerTwo: 0\n    });\n  };\n\n  const newGame = () => {\n    //for new game\n    setPlayerOneTotalWin(0);\n    setPlayerTwoTotalWin(0);\n    restartGame();\n  };\n\n  const onTurnamentClick = () => {\n    //for set turnament limit\n    var turnamentLimit = prompt(\"Set the match limit\", 5);\n    if (turnamentLimit) {\n      setTurnament(turnamentLimit);\n    }\n  };\n\n  const getPlayBoard = () => {\n    return (\n      <>\n        {blockMaping.map((row, index) => {\n          return (\n            <>\n              <div className={`row${index + 1}`}>\n                {row.map((value, rowIndex) => {\n                  return (\n                    <div className={`block-${rowIndex + 1}`}>\n                      <div\n                        id={value.block}\n                        data-for-ladder={value.ladder}\n                        data-for-snake={value.snake}\n                      >\n                        {playerOneActiveIndex === value.block && (\n                          <span className=\"playerOneCoin\">@</span>\n                        )}\n                        {playerTwoActiveIndex === value.block && (\n                          <span className=\"playerTwoCoin\">@</span>\n                        )}\n                        {value.block}\n                        {value.ladder ? (\n                          <span className=\"ladder-to\">{`-> ${value.ladder}`}</span>\n                        ) : (\n                          value.snake && (\n                            <span className=\"snake-to\">{`-> ${value.snake}`}</span>\n                          )\n                        )}\n                      </div>\n                    </div>\n                  );\n                })}\n              </div>\n            </>\n          );\n        })}\n      </>\n    );\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <button onClick={restartGame} className=\"restart-game-button\">\n        Restart\n      </button>\n      <button onClick={newGame} className=\"new-game-button\">\n        New Game\n      </button>\n      <button onClick={onTurnamentClick} className=\"turnament-button\">\n        Set turnament\n      </button>\n      <div className=\"playerOne\">\n        Player One\n        <div className=\"dice-1\">\n          <button\n            className=\"playerOneDice\"\n            onClick={() => diceClick(\"playerOne\")}\n          >\n            {playerOneDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player one total Win :- {playerOneTotalWin}\n        </div>\n      </div>\n      <div className=\"playerTwo\">\n        Player Two\n        <div className=\"dice-2\">\n          <button\n            className=\"playerTwoDice\"\n            onClick={() => diceClick(\"playerTwo\")}\n          >\n            {playerTwoDice}\n          </button>\n        </div>\n        <div className=\"playerWinCount\">\n          Player two total Win :- {playerTwoTotalWin}\n        </div>\n      </div>\n      {getPlayBoard()}\n    </div>\n  );\n};\nexport default SnackGame;\n"]},"metadata":{},"sourceType":"module"}