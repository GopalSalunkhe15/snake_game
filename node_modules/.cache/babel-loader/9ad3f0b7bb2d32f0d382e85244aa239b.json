{"ast":null,"code":"var _jsxFileName = \"/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst SnackGame = () => {\n  _s();\n\n  let blockMaping = require(\"../../json/maping.json\");\n\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n\n  const diceClick = player => {\n    if (player == \"playerOne\" && activePlayer == \"playerOne\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerOneDice(randomNumber);\n      setActivePlayer(\"playerTwo\");\n\n      if (playerOneActiveIndex + randomNumber <= 100) {\n        debugger;\n        let ladder = parseInt(document.getElementById(playerOneActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt(document.getElementById(playerOneActiveIndex + randomNumber).getAttribute(\"data-for-snack\"));\n        setPlayerOneActiveIndex(ladder || snake || playerOneActiveIndex + randomNumber);\n\n        if (playerOneActiveIndex + randomNumber == 100) {\n          alert(\"player One win\");\n        }\n      }\n    } else if (player == \"playerTwo\" && activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        let ladder = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-ladder\"));\n        let snake = parseInt(document.getElementById(playerTwoActiveIndex + randomNumber).getAttribute(\"data-for-snack\"));\n        setPlayerTwoActiveIndex(ladder || snake || playerTwoActiveIndex + randomNumber);\n\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n        }\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"snake-game-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerOne\",\n      children: [\"playerOne\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-1\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => diceClick(\"playerOne\"),\n          children: playerOneDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"playerTwo\",\n      children: [\"playerTwo\", /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"dice-2\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => diceClick(\"playerTwo\"),\n          children: playerTwoDice\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this), blockMaping.map((row, index) => {\n      return /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `row${index + 1}`,\n          children: row.map((value, rowIndex) => {\n            return /*#__PURE__*/_jsxDEV(\"div\", {\n              className: `block-${rowIndex + 1}`,\n              children: /*#__PURE__*/_jsxDEV(\"div\", {\n                id: value.block,\n                \"data-for-ladder\": value.ladder,\n                \"data-for-snack\": value.snack,\n                className: value.ladder && \"ladder\" || value.snack && \"snake\",\n                children: [playerOneActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"#\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 93,\n                  columnNumber: 64\n                }, this), playerTwoActiveIndex === value.block && /*#__PURE__*/_jsxDEV(\"span\", {\n                  children: \"@\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 94,\n                  columnNumber: 64\n                }, this), value.block, /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"oneRed\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 96,\n                  columnNumber: 23\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  class: \"oneGreen\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 97,\n                  columnNumber: 23\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 87,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 13\n        }, this)\n      }, void 0, false);\n    })]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SnackGame, \"o2m/B8GoOyaKUhNTVV8tenDWaIs=\");\n\n_c = SnackGame;\nexport default SnackGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnackGame\");","map":{"version":3,"sources":["/home/gopal.salunkhe/Desktop/snackGame/snackgame/src/component/snackgame/index.js"],"names":["React","useState","useEffect","SnackGame","blockMaping","require","playerOneActiveIndex","setPlayerOneActiveIndex","playerTwoActiveIndex","setPlayerTwoActiveIndex","playerOneDice","setPlayerOneDice","playerTwoDice","setPlayerTwoDice","activePlayer","setActivePlayer","diceClick","player","randomNumber","Math","floor","random","ladder","parseInt","document","getElementById","getAttribute","snake","alert","map","row","index","value","rowIndex","block","snack"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./index.css\";\nconst SnackGame = () => {\n  let blockMaping = require(\"../../json/maping.json\");\n  const [playerOneActiveIndex, setPlayerOneActiveIndex] = useState(1);\n  const [playerTwoActiveIndex, setPlayerTwoActiveIndex] = useState(1);\n  const [playerOneDice, setPlayerOneDice] = useState(0);\n  const [playerTwoDice, setPlayerTwoDice] = useState(0);\n  const [activePlayer, setActivePlayer] = useState(\"playerOne\");\n\n  const diceClick = player => {\n    if (player == \"playerOne\" && activePlayer == \"playerOne\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerOneDice(randomNumber);\n      setActivePlayer(\"playerTwo\");\n      if (playerOneActiveIndex + randomNumber <= 100) {\n        debugger;\n        let ladder = parseInt(\n          document\n            .getElementById(playerOneActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          document\n            .getElementById(playerOneActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snack\")\n        );\n\n        setPlayerOneActiveIndex(\n          ladder || snake || playerOneActiveIndex + randomNumber\n        );\n\n        if (playerOneActiveIndex + randomNumber == 100) {\n          alert(\"player One win\");\n        }\n      }\n    } else if (player == \"playerTwo\" && activePlayer == \"playerTwo\") {\n      let randomNumber = Math.floor(Math.random() * 6) + 1;\n      setPlayerTwoDice(randomNumber);\n      setActivePlayer(\"playerOne\");\n      if (playerTwoActiveIndex + randomNumber <= 100) {\n        let ladder = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-ladder\")\n        );\n        let snake = parseInt(\n          document\n            .getElementById(playerTwoActiveIndex + randomNumber)\n            .getAttribute(\"data-for-snack\")\n        );\n        setPlayerTwoActiveIndex(\n          ladder || snake || playerTwoActiveIndex + randomNumber\n        );\n        if (playerTwoActiveIndex + randomNumber == 100) {\n          alert(\"player Two win\");\n        }\n      }\n    }\n  };\n\n  return (\n    <div className=\"snake-game-container\">\n      <div className=\"playerOne\">\n        playerOne\n        <div className=\"dice-1\">\n          <button onClick={() => diceClick(\"playerOne\")}>\n            {playerOneDice}\n          </button>\n        </div>\n      </div>\n      <div className=\"playerTwo\">\n        playerTwo\n        <div className=\"dice-2\">\n          <button onClick={() => diceClick(\"playerTwo\")}>\n            {playerTwoDice}\n          </button>\n        </div>\n      </div>\n      {blockMaping.map((row, index) => {\n        return (\n          <>\n            <div className={`row${index + 1}`}>\n              {row.map((value, rowIndex) => {\n                return (\n                  <div className={`block-${rowIndex + 1}`}>\n                    <div\n                      id={value.block}\n                      data-for-ladder={value.ladder}\n                      data-for-snack={value.snack}\n                      className={(value.ladder && \"ladder\") || (value.snack && \"snake\") }\n                    >\n                      {playerOneActiveIndex === value.block && <span>#</span>}\n                      {playerTwoActiveIndex === value.block && <span>@</span>}\n                      {value.block}\n                      <div class=\"oneRed\"></div>\n                      <div class=\"oneGreen\"></div>\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </>\n        );\n      })}\n    </div>\n  );\n};\nexport default SnackGame;\n"]},"metadata":{},"sourceType":"module"}